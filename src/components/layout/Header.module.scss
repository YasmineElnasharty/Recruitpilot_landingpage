// Base Variables (can be shared with Footer or moved to a global file)
$amber-400: #fbbf24;
$amber-500: #f59e0b;
$amber-600: #d97706;
$white: #fff;
$gray-300: #d1d5db;
$gray-700: #374151;
$gray-dark: #111111;
$mobile-menu-bg: $gray-dark; // Or slightly different if needed
$mobile-menu-text: $white;
$mobile-menu-border: $gray-700;

// Header Styles
.header {
  position: relative;
  width: 100%;
  padding-top: 1.5rem; // py-6
  padding-bottom: 1.5rem; // py-6
  background-color: $gray-dark;
  z-index: 50; // Ensure header is above other content

  // Prevent body scroll when mobile menu is open
  &.mobileMenuOpenState {
    // If using an overlay approach, you might apply overflow: hidden to body via JS
  }

  @media (max-width: 767px) {
     padding-top: 1rem; // Reduce padding slightly on mobile
     padding-bottom: 1rem;
  }
}

// Container
.container {
  max-width: 1280px; // Default container max-width, adjust if needed
  margin-left: auto;
  margin-right: auto;
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding-left: 1rem; // px-4
  padding-right: 1rem; // px-4

  @media (min-width: 768px) { // md:
    padding-left: 1.5rem; // md:px-6
    padding-right: 1.5rem; // md:px-6
  }

   @media (max-width: 767px) {
      padding-left: 1rem;
      padding-right: 1rem;
   }
}

// Logo Area
.logoArea {
  display: flex;
  align-items: center;
  z-index: 60; // Ensure logo is above mobile nav when closed
}

.logoLink {
  display: flex;
  align-items: center;
}

.logoImage {
  // Specific image styles like filter applied inline
  // width and height are directly on the Image component props
  filter: brightness(1.15);

  // Optional: Adjust logo size on mobile
  @media (max-width: 767px) {
     width: 180px; // Example smaller width
     height: auto; // Adjust height automatically
  }
}

// Navigation
.nav {
  display: none; // hidden by default

  @media (min-width: 768px) { // md:
    display: flex; // md:flex
    align-items: center;
    gap: 2.5rem; // space-x-10
    // Ensure mobile-only elements are hidden on desktop
    .mobileMenuToggle.closeButtonInside,
    .mobileNavActions {
        display: none;
    }
  }

  // --- Mobile Navigation Active State ---
  &.mobileNavActive {
    display: flex; // Show the nav container
    flex-direction: column;
    position: fixed; // Or absolute, depending on desired behavior
    top: 0;
    left: 0;
    width: 100%;
    height: 100vh; // Full screen height
    background-color: $mobile-menu-bg;
    padding: 4rem 1.5rem 2rem; // Add padding (top padding accounts for potential header height or close button)
    gap: 1.5rem; // Space out links vertically
    align-items: flex-start; // Align links to the left
    z-index: 55; // Ensure nav is above content but below toggle/logo if needed
    overflow-y: auto; // Allow scrolling if content overflows

    // Show the close button inside when active
    .mobileMenuToggle.closeButtonInside {
        display: block;
    }

    // Style links specifically for mobile menu
    .navLink {
      display: inline-block; // Change from implicit block/flex default
      font-size: 1.125rem; // Larger font size for mobile nav
      color: $white; // Set default mobile color to white
      padding: 0.5rem 0; // Add some vertical padding
      text-decoration: none; // Ensure no default underline
      position: relative; // Needed for pseudo-element positioning
      transition: color 0.3s ease-in-out; // Keep color transition

      &::after {
        content: '';
        position: absolute;
        width: 0;
        height: 2px; // Underline thickness
        bottom: -4px; // Adjust space below text (was -2px, increased for mobile tap)
        left: 0;
        background-color: $amber-500;
        transition: width 0.3s ease-in-out; // Animate width
      }

      &:hover {
        color: $amber-500; // Change text color on hover
      }

      // Underline now expands to width of inline-block element (text width)
      &:hover::after,
      &.active::after {
         width: 100%; 
      }

      &.active {
        color: $amber-500; // Active remains orange
      }
    }
  }
}

.navLink {
  font-size: 0.875rem; // text-sm
  font-weight: 600; // font-semibold
  color: $white; // Set default color to white
  // transition: color 200ms; // Handled by the new transition below
  text-decoration: none; // Ensure no underline initially
  position: relative; // Needed for pseudo-element positioning
  padding-bottom: 4px; // Add padding to make space for the underline
  transition: color 0.3s ease-in-out; // Smooth color transition

  &::after {
    content: '';
    position: absolute;
    width: 0; // Start with no width
    height: 2px; // Underline thickness
    bottom: 0; // Position at the bottom of the padding
    left: 0;
    background-color: $amber-500;
    transition: width 0.3s ease-in-out; // Animate width smoothly
  }


  &:hover {
    color: $amber-500; // New hover color: orange
    // text-decoration: underline; // Remove default underline
    // text-decoration-color: $amber-500; // Remove default underline color
  }

   &:hover::after {
      width: 100%; // Expand underline to full width on hover
   }

  &.active { // Style for the active link (Home)
    color: $amber-500; // Keep active color orange

    // Apply underline to active state by default
    &::after {
       width: 100%;
       // No transition needed here, it should appear directly
    }
  }
}

// Actions Area (Sign Up / Get Started)
.actions {
  display: flex;
  align-items: center;
  gap: 1rem; // space-x-4

  @media (max-width: 767px) { // Hide on mobile
    display: none;
  }
}

// Sign Up Button
.signUpButton {
  color: $white;
  font-size: 0.875rem; // text-sm
  display: flex;
  align-items: center;
  transition: color 200ms;
  padding: 0.5rem 1rem; // px-4 py-2
  text-decoration: none; // Ensure link looks like button text

  .signUpContent {
    display: flex;
    align-items: center;
  }
}

.lockIcon {
  margin-left: 0.375rem; // ml-1.5
  display: inline-block;
  width: 12px;
  height: 12px;
  fill: currentColor;
}

// Get Started Button
.getStartedButton {
  background-color: $amber-500;
  color: $white;
  padding: 0.5rem 1rem; // px-4 py-2
  border-radius: 9999px; // rounded-full
  display: inline-flex; // Ensure flex layout for parent
  align-items: center;
  transition: background-color 200ms;
  font-weight: 500; // font-medium
  font-size: 0.875rem; // text-sm
  text-decoration: none; // Remove default link underline

  &:hover {
    background-color: $amber-600;
  }

  .text {
    margin-right: 0.25rem; // mr-1
  }

  .arrow {
    margin-left: 0.25rem;
    color: $white; // This sets the stroke color via stroke="currentColor"
    display: inline-flex;
    align-items: center;

    svg {
      width: 1em; // Keep size relative to font
      height: 1em;
      // stroke-width: 2; // Can be set here instead of SVG attribute if preferred
    }
  }
}

// --- Mobile Menu Toggle ---
.mobileMenuToggle {
  display: none; // Hide by default
  background: none;
  border: none;
  padding: 0.5rem;
  cursor: pointer;
  color: $white; // Icon color
  z-index: 60; // Ensure toggle is above mobile nav

  @media (max-width: 767px) { // Show only on mobile
    display: block;
  }

  // Hide the close button inside the nav by default
  &.closeButtonInside {
     display: none;
     position: absolute;
     top: 1rem;
     right: 1rem;
     padding: 0.5rem; // Add padding for easier tapping
  }
}

// --- Action buttons inside Mobile Nav ---
.mobileNavActions {
    display: flex;
    flex-direction: column; // Stack buttons vertically
    gap: 1rem; // Space between buttons
    margin-top: 2rem; // Space above buttons
    padding-top: 1.5rem; // Space above buttons
    border-top: 1px solid $mobile-menu-border; // Separator line
    width: 100%; // Take full width

    // Reuse existing button styles, adjust alignment if needed
    .signUpButton, .getStartedButton {
       justify-content: center; // Center text/icon in button
       width: 100%; // Make buttons full width
       padding-top: 0.75rem;
       padding-bottom: 0.75rem;
    }
}

// Bottom Border Gradient
.bottomBorder {
  position: absolute;
  bottom: 0.5rem; // bottom-2 (8px)
  left: 0;
  right: 0;
  height: 1px; // h-px
  background: linear-gradient(to right, $gray-dark, $gray-700, $gray-dark); // bg-gradient-to-r from-[#111111] via-gray-700 to-[#111111]
  z-index: 1; // Ensure border is behind content if header is relative
} 